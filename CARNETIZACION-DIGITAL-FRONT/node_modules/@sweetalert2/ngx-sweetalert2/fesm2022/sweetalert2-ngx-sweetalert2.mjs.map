{"version":3,"file":"sweetalert2-ngx-sweetalert2.mjs","sources":["../../../projects/ngx-sweetalert2/src/lib/di.ts","../../../projects/ngx-sweetalert2/src/lib/sweetalert2-loader.service.ts","../../../projects/ngx-sweetalert2/src/lib/swal.component.ts","../../../projects/ngx-sweetalert2/src/lib/swal.directive.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal.component.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal-targets.service.ts","../../../projects/ngx-sweetalert2/src/lib/swal-portal.directive.ts","../../../projects/ngx-sweetalert2/src/lib/sweet-alert2.module.ts","../../../projects/ngx-sweetalert2/src/sweetalert2-ngx-sweetalert2.ts"],"sourcesContent":["import { InjectionToken } from \"@angular/core\";\nimport Swal from \"sweetalert2\";\n\nexport const swalProviderToken = new InjectionToken<typeof Swal>(\"@sweetalert2/ngx-sweetalert2#swalProvider\");\n\nexport const fireOnInitToken = new InjectionToken<boolean>(\"@sweetalert2/ngx-sweetalert2#fireOnInit\");\n\nexport const dismissOnDestroyToken = new InjectionToken<boolean>(\"@sweetalert2/ngx-sweetalert2#dismissOnDestroy\");\n","import { Inject, Injectable } from \"@angular/core\";\nimport SwalDefault, * as Swal from \"sweetalert2\";\nimport { swalProviderToken } from \"./di\";\n\nexport type SwalModule = typeof SwalDefault | typeof Swal;\n\nexport type SwalProvider = SwalModuleLoader | SwalModule;\n\nexport type SwalModuleLoader = () => Promise<SwalModule>;\n\n@Injectable()\nexport class SweetAlert2LoaderService {\n    private readonly swalProvider: SwalProvider;\n\n    private swalPromiseCache?: Promise<typeof SwalDefault>;\n\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    public constructor(@Inject(swalProviderToken) swalProvider: any) {\n        this.swalProvider = swalProvider;\n    }\n\n    public get swal(): Promise<typeof SwalDefault> {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n\n        return this.swalPromiseCache!;\n    }\n\n    public preloadSweetAlertLibrary(): void {\n        if (this.swalPromiseCache) return;\n\n        const libPromise = isLoader(this.swalProvider) ? this.swalProvider() : Promise.resolve(this.swalProvider);\n\n        this.swalPromiseCache = libPromise.then((value) => (isDefaultExport(value) ? value : value.default));\n\n        function isLoader(value: SwalProvider): value is SwalModuleLoader {\n            return typeof value === \"function\" && (value as any).version === undefined;\n        }\n\n        function isDefaultExport(value: SwalModule): value is typeof SwalDefault {\n            return typeof value === \"function\";\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from \"@angular/core\";\nimport Swal, { SweetAlertOptions, SweetAlertResult, SweetAlertUpdatableParameters } from \"sweetalert2\";\nimport { dismissOnDestroyToken, fireOnInitToken } from \"./di\";\nimport * as events from \"./swal-events\";\nimport { SweetAlert2LoaderService } from \"./sweetalert2-loader.service\";\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`\n *     and `didDestroy`.\n *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,\n *     there can't be multiple listeners on them, and we need the values they can/must return.\n */\n@Component({\n    selector: \"swal\",\n    template: \"\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false,\n})\nexport class SwalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() public title: SweetAlertOptions[\"title\"];\n    @Input() public titleText: SweetAlertOptions[\"titleText\"];\n    @Input() public text: SweetAlertOptions[\"text\"];\n    @Input() public html: SweetAlertOptions[\"html\"];\n    @Input() public footer: SweetAlertOptions[\"footer\"];\n    @Input() public icon: SweetAlertOptions[\"icon\"];\n    @Input() public iconColor: SweetAlertOptions[\"iconColor\"];\n    @Input() public iconHtml: SweetAlertOptions[\"iconHtml\"];\n    @Input() public backdrop: SweetAlertOptions[\"backdrop\"];\n    @Input() public toast: SweetAlertOptions[\"toast\"];\n    @Input() public target: SweetAlertOptions[\"target\"];\n    @Input() public input: SweetAlertOptions[\"input\"];\n    @Input() public width: SweetAlertOptions[\"width\"];\n    @Input() public padding: SweetAlertOptions[\"padding\"];\n    @Input() public background: SweetAlertOptions[\"background\"];\n    @Input() public position: SweetAlertOptions[\"position\"];\n    @Input() public grow: SweetAlertOptions[\"grow\"];\n    @Input() public showClass: SweetAlertOptions[\"showClass\"];\n    @Input() public hideClass: SweetAlertOptions[\"hideClass\"];\n    @Input() public customClass: SweetAlertOptions[\"customClass\"];\n    @Input() public timer: SweetAlertOptions[\"timer\"];\n    @Input() public timerProgressBar: SweetAlertOptions[\"timerProgressBar\"];\n    @Input() public heightAuto: SweetAlertOptions[\"heightAuto\"];\n    @Input() public allowOutsideClick: SweetAlertOptions[\"allowOutsideClick\"];\n    @Input() public allowEscapeKey: SweetAlertOptions[\"allowEscapeKey\"];\n    @Input() public allowEnterKey: SweetAlertOptions[\"allowEnterKey\"];\n    @Input() public stopKeydownPropagation: SweetAlertOptions[\"stopKeydownPropagation\"];\n    @Input() public keydownListenerCapture: SweetAlertOptions[\"keydownListenerCapture\"];\n    @Input() public showConfirmButton: SweetAlertOptions[\"showConfirmButton\"];\n    @Input() public showDenyButton: SweetAlertOptions[\"showDenyButton\"];\n    @Input() public showCancelButton: SweetAlertOptions[\"showCancelButton\"];\n    @Input() public confirmButtonText: SweetAlertOptions[\"confirmButtonText\"];\n    @Input() public denyButtonText: SweetAlertOptions[\"denyButtonText\"];\n    @Input() public cancelButtonText: SweetAlertOptions[\"cancelButtonText\"];\n    @Input() public confirmButtonColor: SweetAlertOptions[\"confirmButtonColor\"];\n    @Input() public denyButtonColor: SweetAlertOptions[\"denyButtonColor\"];\n    @Input() public cancelButtonColor: SweetAlertOptions[\"cancelButtonColor\"];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions[\"confirmButtonAriaLabel\"];\n    @Input() public denyButtonAriaLabel: SweetAlertOptions[\"denyButtonAriaLabel\"];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions[\"cancelButtonAriaLabel\"];\n    @Input() public buttonsStyling: SweetAlertOptions[\"buttonsStyling\"];\n    @Input() public reverseButtons: SweetAlertOptions[\"reverseButtons\"];\n    @Input() public focusConfirm: SweetAlertOptions[\"focusConfirm\"];\n    @Input() public focusDeny: SweetAlertOptions[\"focusDeny\"];\n    @Input() public focusCancel: SweetAlertOptions[\"focusCancel\"];\n    @Input() public showCloseButton: SweetAlertOptions[\"showCloseButton\"];\n    @Input() public closeButtonHtml: SweetAlertOptions[\"closeButtonHtml\"];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions[\"closeButtonAriaLabel\"];\n    @Input() public loaderHtml: SweetAlertOptions[\"loaderHtml\"];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions[\"showLoaderOnConfirm\"];\n    @Input() public preConfirm: SweetAlertOptions[\"preConfirm\"];\n    @Input() public preDeny: SweetAlertOptions[\"preDeny\"];\n    @Input() public imageUrl: SweetAlertOptions[\"imageUrl\"];\n    @Input() public imageWidth: SweetAlertOptions[\"imageWidth\"];\n    @Input() public imageHeight: SweetAlertOptions[\"imageHeight\"];\n    @Input() public imageAlt: SweetAlertOptions[\"imageAlt\"];\n    @Input() public inputLabel: SweetAlertOptions[\"inputLabel\"];\n    @Input() public inputPlaceholder: SweetAlertOptions[\"inputPlaceholder\"];\n    @Input() public inputValue: SweetAlertOptions[\"inputValue\"];\n    @Input() public inputOptions: SweetAlertOptions[\"inputOptions\"];\n    @Input() public inputAutoTrim: SweetAlertOptions[\"inputAutoTrim\"];\n    @Input() public inputAttributes: SweetAlertOptions[\"inputAttributes\"];\n    @Input() public inputValidator: SweetAlertOptions[\"inputValidator\"];\n    @Input() public returnInputValueOnDeny: SweetAlertOptions[\"returnInputValueOnDeny\"];\n    @Input() public validationMessage: SweetAlertOptions[\"validationMessage\"];\n    @Input() public progressSteps: SweetAlertOptions[\"progressSteps\"];\n    @Input() public currentProgressStep: SweetAlertOptions[\"currentProgressStep\"];\n    @Input() public progressStepsDistance: SweetAlertOptions[\"progressStepsDistance\"];\n    @Input() public scrollbarPadding: SweetAlertOptions[\"scrollbarPadding\"];\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input()\n    public set swalOptions(options: SweetAlertOptions) {\n        //=> Update properties\n        Object.assign(this, options);\n\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options) as (keyof SweetAlertOptions)[];\n        touchedKeys.forEach(this.markTouched);\n    }\n\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    public get swalOptions(): SweetAlertOptions {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce<SweetAlertOptions>(\n            (obj, key) => ({ ...obj, [key]: this[key as keyof this] }),\n            {},\n        );\n    }\n\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    @Input()\n    public swalFireOnInit?: boolean;\n\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    @Input()\n    public swalDismissOnDestroy?: boolean;\n\n    @Input()\n    public set swalVisible(visible: boolean) {\n        if (visible) {\n            this.fire();\n        } else {\n            this.close();\n        }\n    }\n\n    public get swalVisible(): boolean {\n        return this.isCurrentlyShown;\n    }\n\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    @Output()\n    public readonly willOpen = new EventEmitter<events.WillOpenEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.\n     */\n    @Output()\n    public readonly didOpen = new EventEmitter<events.DidOpenEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is\n     * repainted on the screen).\n     * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\n     * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over\n     * {@link willOpen}.\n     */\n    @Output()\n    public readonly didRender = new EventEmitter<events.DidRenderEvent>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\n     * being fired).\n     */\n    @Output()\n    public readonly willClose = new EventEmitter<events.WillCloseEvent>();\n\n    /**\n     * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\n     * another popup being fired).\n     */\n    @Output()\n    public readonly didClose = new EventEmitter<void>();\n\n    /**\n     * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\n     * popup.\n     * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer\n     * {@link didDestroy} over {@link didClose}.\n     */\n    @Output()\n    public readonly didDestroy = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    @Output()\n    public readonly deny = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link close} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly dismiss = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    private isCurrentlyShown = false;\n\n    public constructor(\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        @Inject(fireOnInitToken) private readonly moduleLevelFireOnInit: boolean,\n        @Inject(dismissOnDestroyToken) private readonly moduleLevelDismissOnDestroy: boolean,\n    ) {}\n\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    public ngOnInit(): void {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    public ngAfterViewInit(): void {\n        const fireOnInit = this.swalFireOnInit === undefined ? this.moduleLevelFireOnInit : this.swalFireOnInit;\n\n        if (fireOnInit) {\n            this.fire();\n        }\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key): key is keyof SweetAlertOptions => !key.startsWith(\"swal\"))\n            .forEach(this.markTouched);\n\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    public ngOnDestroy(): void {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy =\n            this.swalDismissOnDestroy === undefined ? this.moduleLevelDismissOnDestroy : this.swalDismissOnDestroy;\n\n        if (dismissOnDestroy) {\n            this.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (dismiss)=\"myHandler($event)\" can be used in templates.\n     */\n    public async fire(): Promise<SweetAlertResult> {\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const userOptions = this.swalOptions;\n\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n\n            //=> Handle modal lifecycle events\n            willOpen: composeHook(userOptions.willOpen, (modalElement) => {\n                this.willOpen.emit({ modalElement });\n            }),\n            didOpen: composeHook(userOptions.didOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.didOpen.emit({ modalElement });\n            }),\n            didRender: composeHook(userOptions.didRender, (modalElement) => {\n                this.didRender.emit({ modalElement });\n            }),\n            willClose: composeHook(userOptions.willClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.willClose.emit({ modalElement });\n            }),\n            didClose: composeHook(userOptions.didClose, () => {\n                this.didClose.emit();\n            }),\n            didDestroy: composeHook(userOptions.didDestroy, () => {\n                this.didDestroy.emit();\n            }),\n        };\n\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n\n        //=> Emit on (confirm), (deny) or (dismiss)\n        switch (true) {\n            case result.isConfirmed:\n                this.confirm.emit(result.value);\n                break;\n            case result.isDenied:\n                this.deny.emit();\n                break;\n            case result.isDismissed:\n                this.dismiss.emit(result.dismiss);\n                break;\n        }\n\n        return result;\n\n        function composeHook<T extends (...args: any[]) => void>(\n            userHook: T | undefined,\n            libHook: T,\n        ): (...args: Parameters<T>) => void {\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).\n     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.\n     *               {@see Swal.close}.\n     */\n    public async close(result?: SweetAlertResult): Promise<void> {\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    public async update(options?: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): Promise<void> {\n        if (options) {\n            this.swalOptions = options;\n        }\n\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const allOptions = this.swalOptions;\n\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce<Pick<SweetAlertOptions, SweetAlertUpdatableParameters>>(\n                (obj, key) => ({ ...obj, [key]: allOptions[key] }),\n                {},\n            );\n\n        swal.update(updatableOptions);\n    }\n}\n","import {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewContainerRef,\n} from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from \"sweetalert2\";\nimport { SwalComponent } from \"./swal.component\";\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    // eslint-disable-next-line @angular-eslint/directive-selector\n    selector: \"[swal]\",\n    standalone: false,\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input()\n    public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        } else {\n            this.swalOptions = options;\n        }\n\n        function isArrayOptions(value: any): value is SweetAlertArrayOptions {\n            return Array.isArray(options);\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * The event value ($event) can be either:\n     *  - by default, just `true`,\n     *  - when using {@link input}, the input value,\n     *  - when using {@link preConfirm}, the return value of this function.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Deny\".\n     * This event bears no value.\n     * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and\n     * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.\n     *\n     * Example:\n     *     <swal (deny)=\"handleDeny()\"></swal>\n     *\n     *     public handleDeny(): void {\n     *     }\n     */\n    @Output()\n    public readonly deny = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when\n     * the modal was programmatically closed (through {@link dismiss} for example).\n     *\n     * Example:\n     *     <swal (dismiss)=\"handleDismiss($event)\"></swal>\n     *\n     *     public handleDismiss(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly dismiss = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef?: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance?: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions?: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver,\n    ) {}\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),\n     * (deny) and (dismiss) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener(\"click\", [\"$event\"])\n    public onClick(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (!this.swalInstance) return;\n\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n\n        const swalClosed = new Subject<void>();\n\n        this.swalInstance.confirm\n            .asObservable()\n            .pipe(takeUntil(swalClosed))\n            .subscribe((v) => this.confirm.emit(v));\n        this.swalInstance.deny\n            .asObservable()\n            .pipe(takeUntil(swalClosed))\n            .subscribe((v) => this.deny.emit(v));\n        this.swalInstance.dismiss\n            .asObservable()\n            .pipe(takeUntil(swalClosed))\n            .subscribe((v) => this.dismiss.emit(v));\n\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from \"@angular/core\";\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n@Component({\n    selector: \"swal-portal\",\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: false,\n})\nexport class SwalPortalComponent {\n    @Input()\n    public template: TemplateRef<any> | null = null;\n}\n","import { Injectable } from \"@angular/core\";\nimport Swal, { SweetAlertOptions } from \"sweetalert2\";\n\nexport interface SwalPortalTarget {\n    options?: SweetAlertOptions;\n    element(swal: typeof Swal): HTMLElement | null;\n}\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n@Injectable({ providedIn: \"root\" })\nexport class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    public readonly closeButton: SwalPortalTarget = {\n        element: (swal) => swal.getCloseButton(),\n        options: { showCloseButton: true },\n    };\n\n    /**\n     * Targets the modal title block contents.\n     */\n    public readonly title: SwalPortalTarget = {\n        element: (swal) => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: \" \" },\n    };\n\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    public readonly content: SwalPortalTarget = {\n        element: (swal) => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: \" \" },\n    };\n\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    public readonly actions: SwalPortalTarget = {\n        element: (swal) => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true },\n    };\n\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly confirmButton: SwalPortalTarget = {\n        element: (swal) => swal.getConfirmButton(),\n        options: { showConfirmButton: true },\n    };\n\n    /**\n     * Targets the deny button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly denyButton: SwalPortalTarget = {\n        element: (swal) => swal.getDenyButton(),\n        options: { showDenyButton: true },\n    };\n\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly cancelButton: SwalPortalTarget = {\n        element: (swal) => swal.getCancelButton(),\n        options: { showCancelButton: true },\n    };\n\n    /**\n     * Targets the modal footer contents.\n     */\n    public readonly footer: SwalPortalTarget = {\n        element: (swal) => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: \" \" },\n    };\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    Host,\n    Injector,\n    Input,\n    OnDestroy,\n    OnInit,\n    TemplateRef,\n} from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { SwalPortalTarget, SwalPortalTargets } from \"./swal-portal-targets.service\";\nimport { SwalPortalComponent } from \"./swal-portal.component\";\nimport { SwalComponent } from \"./swal.component\";\nimport { SweetAlert2LoaderService } from \"./sweetalert2-loader.service\";\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: \"[swalPortal]\",\n    standalone: false,\n})\nexport class SwalPortalDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input(\"swalPortal\")\n    public target?: SwalPortalTarget;\n\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    private portalComponentRef?: ComponentRef<SwalPortalComponent>;\n\n    private readonly destroyed = new Subject<void>();\n\n    public constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        private readonly swalTargets: SwalPortalTargets,\n        @Host() private readonly swalComponent: SwalComponent,\n    ) {}\n\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.didRender.pipe(takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));\n        this.swalComponent.willOpen.pipe(takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));\n        this.swalComponent.didDestroy.pipe(takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));\n    }\n\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    public ngOnDestroy(): void {\n        this.destroyed.next();\n    }\n\n    /**\n     * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link willOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    private async didRenderHook(): Promise<void> {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n\n        //=> Find target element\n        const targetEl = this.target!.element(swal);\n        if (!targetEl) return;\n\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n\n    /**\n     * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    private willOpenHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n\n    /**\n     * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    private didDestroyHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    private createPortalComponent(): ComponentRef<SwalPortalComponent> {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n\n        return componentRef;\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from \"./di\";\nimport { SwalPortalComponent } from \"./swal-portal.component\";\nimport { SwalPortalDirective } from \"./swal-portal.directive\";\nimport { SwalComponent } from \"./swal.component\";\nimport { SwalDirective } from \"./swal.directive\";\nimport { SwalProvider, SweetAlert2LoaderService } from \"./sweetalert2-loader.service\";\n\nexport interface Sweetalert2ModuleConfig {\n    provideSwal?: SwalProvider;\n    fireOnInit?: boolean;\n    dismissOnDestroy?: boolean;\n}\n\nexport function provideDefaultSwal() {\n    return import(\"sweetalert2\");\n}\n\n@NgModule({\n    declarations: [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent],\n    imports: [CommonModule],\n    exports: [SwalComponent, SwalPortalDirective, SwalDirective],\n})\nexport class SweetAlert2Module {\n    public static forRoot(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true },\n            ],\n        };\n    }\n\n    public static forChild(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...(options.provideSwal\n                    ? [SweetAlert2LoaderService, { provide: swalProviderToken, useValue: options.provideSwal }]\n                    : []),\n                ...(options.fireOnInit !== undefined\n                    ? [{ provide: fireOnInitToken, useValue: options.fireOnInit }]\n                    : []),\n                ...(options.dismissOnDestroy !== undefined\n                    ? [{ provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }]\n                    : []),\n            ],\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.SweetAlert2LoaderService","i2.SwalPortalTargets","i3.SwalComponent"],"mappings":"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"}